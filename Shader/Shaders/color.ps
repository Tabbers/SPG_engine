
Texture2D depthMapTexture : register(t0);
Texture2D objectTexture : register(t1);
Texture2D normalTexture : register(t2);

SamplerState SampleTypeClamp  : register(s0);
SamplerState SampleTypeWrap  : register(s1);
SamplerState SampleTypeWrap2  : register(s2);

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
	float4 specularColor;
	float3 lightDirection;
	float specularIntensity;
	bool drawNormal;
	float3 padding;
	bool drawSpec;
	float3 padding2;
	
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDir: TEXCOORD3;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float4 lightViewPosition : TEXCOORD1;
	float3 lightPos : TEXCOORD2;
};

float4 ColPixelShader(PixelInputType input) : SV_TARGET
{
	float bias;
	float4 textureColor;
	float4 normalMapColor;
	float3 bumpNormal;
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
    float lightIntensity;
    float4 colorOut;
	float3 reflection;
	float4 specular;

	specular = float4(0.0f,0.0f,0.0f,0.0f);

	//Sample Texture
	textureColor = objectTexture.Sample(SampleTypeWrap, input.tex); 
	if(drawNormal)
	{
		//Sample NormalMap
		normalMapColor = normalTexture.Sample(SampleTypeWrap, input.tex);

		// Expand the range of the normal value from (0, +1) to (-1, +1).
		normalMapColor = (normalMapColor * 2.0f) - 1.0f;
    
		// Calculate the normal from the data in the bump map.
		bumpNormal = (normalMapColor.x * input.tangent) + (normalMapColor.y * input.binormal) + (normalMapColor.z * input.normal);
	
		// Normalize the resulting bump normal.
		bumpNormal = normalize(bumpNormal);
	}
	else
	{
		bumpNormal = input.normal;
	}

	// Set the bias value for fixing the floating point precision issues.
	bias = 0.0001f;

	// Set the default output color to the ambient light value for all pixels.
    colorOut = ambientColor;
	
	// Calculate the projected texture coordinates.
	projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;

	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		// Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
		depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

		// Calculate the depth of the light.
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		// Subtract the bias from the lightDepthValue.
		lightDepthValue = lightDepthValue - bias;

		// Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
		// If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
		if(lightDepthValue < depthValue)
		{
		    // Calculate the amount of light on this pixel.
			lightIntensity = saturate(dot(bumpNormal, input.lightPos));

		    if(lightIntensity > 0.0f)
			{
				// Determine the final diffuse color based on the diffuse color and the amount of light intensity.
				colorOut += (diffuseColor * lightIntensity);

				// Saturate the final light color.
				colorOut = saturate(colorOut);

				//Calculate the reflection vector for the pixel
				reflection = normalize(2 * lightIntensity * bumpNormal - lightDirection); 

				//calculate specular component
				specular = pow(saturate(dot(reflection, input.viewDir)), specularIntensity);
				// Combine the light and texture color.
			}
		}
	}
	colorOut = textureColor*colorOut;
	if(drawSpec) colorOut  = saturate(colorOut + specular);
    return colorOut;
}
